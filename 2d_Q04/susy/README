# ------------------------------------------------------------------
Two-dimensional N=(2,2) supersymmetric Yang--Mills theory

# Actively maintained targets:
susy_hmc for evolution with accept/reject step
susy_meas for standard measurements on saved configurations
susy_hmc_meas for evolution along with standard measurements
susy_eig for eigenvalue measurements on saved configurations
susy_phase for pfaffian phase measurements on saved configurations

# Additional targets, not actively maintained or regularly tested
susy_phi for evolution without accept/reject step
susy_hmc_pg and susy_phi_pg for testing with gauge fields only (no fermions)
susy_spill for printing out configuration in format expected by serial C++ code

# Dependences:
LAPACK is now required for all targets
Eigenvalue measurements (susy_eig) require PRIMME (https://github.com/primme/primme) as well

# Defines for compilation:
-DPHI_ALGORITHM for the basic phi algorithm (REQUIRED)
-DHMC_ALGORITHM switches on the accept/reject step
-DEIG_POT switches from a double-trace to a single-trace scalar potential (not actively tested)
-DCORR switches on the Konishi and SUGRA correlator calculation
-DSMEAR switches on optional smearing for measurements
-DWLOOP switches on the gauge-fixed Wilson loop calculation
-DBILIN switches on the fermion bilinear calculation
-DEIG switches on the PRIMME eigenvalue calculation
-DPUREGAUGE switches off the fermions (FOR TESTING)

# Gauge group and fermion rep:
NCOL and DIMF defined in ../include/susy.h
For now we fix U(NCOL) gauge group with DIMF=NCOL*NCOL for adjoint rep

# Boundary conditions for fermions:
Only supports periodic spatial boundary conditions (BCs) for now
Input parameter PBC = +/-1 chooses periodic or anti-periodic temporal BCs
# ------------------------------------------------------------------



# ------------------------------------------------------------------
# Sample input file with explanations:
prompt 0    # If non-zero, prompt user to manually input each parameter
nx 6        # Lattice volume is nx*nt and must be even
nt 6        # (in fact, each processor must get an even number of sites)
PBC -1      # Anti-periodic temporal boundary conditions for the fermions
iseed 41    # Random number generator seed

Nroot 1     # Number of quarter-roots to accelerate MD evolution
Norder 15   # Order of rational approximation for each quarter-root

warms 0               # Number of trajectories without expensive measurements
trajecs 10            # Number of trajectories with expensive measurements
traj_length 1         # Trajectory length
nstep 10              # Fermion steps per trajectory; step_size = traj_length / nstep
nstep_gauge 10        # Gauge steps per fermion step
traj_between_meas 10  # How many trajectories to skip between expensive measurements

lambda 1.5      # 't Hooft coupling
kappa_u1 0.6    # Plaquette determinant coupling
bmass 0.2       # Scalar potential coupling (bosonic mass mu)
fmass 0.0       # Mass shift in fermion operator
G 0.1           # Q-invariant plaquette determinant coupling

# The next three lines must only be included when compiling with -DSMEAR
APE_smear     # Type of smearing: no_smear, stout_smear or APE_smear
Nsmear 1      # Number of smearing steps
alpha 0.1     # Smearing parameter (rho for stout, alpha for APE)

max_cg_iterations 500   # Maximum number of CG iterations
error_per_site 1e-5     # Stopping condition for CG (will be squared)

# The next line must only be included when compiling with -DBILIN
nsrc 3                  # Number of stochastic sources for fermion bilinear calculations

# The next three lines must only be included when compiling with -DEIG
Nvec 100              # Number of eigenvalues to calculate
eig_tol 1e-8          # Eigenvalue convergence criterion
maxIter 5000          # Maximum number of eigenvalue iterations

# The next two lines must only be included when compiling with -DPHASE
ckpt_load -1    # If positive, load checkpointed pfaffian computation
                # from config.Q$ckpt_load and config.diag$ckpt_load
ckpt_save -1    # If positive, checkpoint pfaffian computation
                # to config.Q$ckpt_save and config.diag$ckpt_save

# The next line must only be included when compiling with -DWLOOP
coulomb_gauge_fix   # Gauge fixing: coulomb_gauge_fix or no_gauge_fix

fresh     # What to do with lattice at start: fresh, continue or reload_serial
forget    # What to do with lattice at end: forget or save_serial
# ------------------------------------------------------------------



# ------------------------------------------------------------------
# 0) Header files in this directory:
defines.h       -- Define Omelyan parameters, numbers of offsets and terms in the action, tunable parameter C2 and some other useful quantities
lattice.h       -- Define Twist_Fermions, the site struct, global variables and fields
params.h        -- Define a struct for reading input parameters
susy_includes.h -- Define lots of routines, some of which are discussed below

# 1) Summary of files in this directory:
# 1a) Files used by all executables
setup.c               -- Read in parameters, initialize variables and allocate global fields
setup_lambda.c        -- Set up U(N) generators, epsilon tensor and lookup tables for nested loops
setup_offset.c        -- Set up gathers for terms in the action, especially Qclosed terms
action.c              -- Compute the action, including related routines also needed by forces
plaq.c                -- Compute the average plaquette
ploop.c               -- Compute the average Polyakov loop or Wilson line
link_trace.c          -- Compute average link, Tr[U_a Ubar_a] / NCOL
widths.c              -- Calculate sqrt(<P^2> - <P>^2) for the plaquette and plaquette determinant
determinant.c         -- Utilities for finding the determinant of NCOL x NCOL link matrices, using LAPACK
grsource.c            -- Generate gaussian random pseudofermions and momenta for the RHMC
congrad_multi_field.c -- Multi-mass CG inverter
utilities.c           -- Twist_Fermion matrix--vector operator and related routines also needed by forces
library_util.c        -- Helper routines, many of which might be better suited to ../libraries/
gauge_info.c          -- Put information into configuration files

# 1b) Files mainly used by RHMC evolution targets (susy_hmc and susy_hmc_meas)
control.c    -- Main program for evolution, optionally including additional measurements
setup_rhmc.c -- Initializes RHMC poles and residues, values copied from ./remez/ output
update_o.c   -- Omelyan RHMC evolution
update_h.c   -- Update gauge momenta with forces from both gauge and fermion fields
det_force.c  -- Contribution to force from determinant term

# 1c) Files used mainly by standard measurement targets (susy_meas and susy_hmc_meas)
control_meas.c       -- Main program for standard measurements only
smear.c              -- A4* lattice smearing routines: stout and APE-like
                        (NB: Unlike standard APE smearing, we don't project after adding staple sum)
                        (NB: APE-like smearing currently builds staples from polar-projected links)
local_plaq.c         -- Calculate the average and minimum plaquettes (to monitor smearing), optionally printing entire distribution
bilinear_Ward.c      -- Measure Ward identity involving eta.psi_a fermion bilinear
konishi.c            -- Compute Konishi and SUGRA operators on each time-slice, with both vev and volume-average subtractions
correlator_r.c       -- Konishi and SUGRA correlators C(r), with both vev and volume-average subtractions
monopole.c           -- Measure density of U(1) monopole world lines in doubled 4-cells, omitting the fifth link
hvy_pot.c            -- Compute correlators of gauge-fixed temporal links to determine the static potential
hvy_pot_polar.c      -- Compute correlators of polar-projected gauge-fixed temporal links
                        (NB: overwrites links, which have to be saved and restored if they will be used further)
unit.c               -- Polar projection (unitarization) using LAPACK
hvy_pot_loop.c       -- Compute more standard on-axis Wilson loops to determine the static potential
hvy_pot_polar_loop.c -- Compute more standard on-axis Wilson loops of polar-projected links
                        (NB: overwrites links, as above)
path.c               -- Used to construct Wilson loops for hvy_pot_loop.c and hvy_pot_polar_loop.c
rsymm.c              -- Compute modified Wilson loops related to R symmetry transformations
scalar_eig.c         -- Compute eigenvalues of scalar fields

# 1d) Additional files used only by MCRG target (susy_mcrg)
control_mcrg.c       -- Main program for RG blocking and blocked measurements
block_mcrg.c         -- RG blocking function, overwrites links and needs lattice volume divisible by 2^d
blocked_smear.c      -- Stout and APE-like smearing with strides to accommodate blocked lattices
blocked_local_plaq.c -- Calculate the average and minimum plaquettes (to monitor smearing), with strides to accommodate blocked lattices
blocked_plaq.c       -- Compute the average plaquette, with strides to accommodate blocked lattices
blocked_ploop.c      -- Compute the average Polyakov loop, with strides to accommodate blocked lattices
blocked_ops.c        -- Compute Konishi and SUGRA operators summed over the (blocked) lattice volume
blocked_rsymm.c      -- Compute modified Wilson loops related to R symmetry transformations, with strides to accommodate blocked lattices

# 1e) Additional files used only by fermion eigenvalue target (susy_eig)
control_eig.c -- Main program for eigenvalues measurements only
eig.c         -- Eigenvalue measurements using PRIMME, LAPACK and BLAS
                 (NB: User may need to modify path to primme.h)
                 (NB: User may need to modify PLIB in makefile to provide libzprimme.a)

# 1f) Additional files used only by pfaffian target (susy_phase)
control_phase.c -- Main program for pfaffian measurements only
phase.c         -- Phase and (log of) magnitude of the pfaffian

# 1g) Files not currently used, retained for potential future testing
ploop_corr.c      -- Find Polyakov loop on every spatial site to be fed into FFT
update_leapfrog.c -- Leapfrog RHMC evolution
phase_serial.c    -- A serial gaussian elimination pfaffian algorithm, to check the parallel computation

# 2) Summary of files in the ../generic directory:
# 2a) Files used by all executables
com_vanilla.c           -- Serial communications, selected by Makefile
com_mpi.c               -- Parallel communications, selected by Makefile
io_lat.c                -- I/O modified to handle five-link lattice
io_lat_utils.c          -- Lower-level utilities for lattice I/O
io_helpers.c            -- Higher-level interface for lattice I/O
make_lattice.c          -- Set up lattice, neighbors, etc.
nersc_cksum.c           -- Compute link trace sum for lattice I/O (cksum itself set to zero)
ranstuff.c              -- Random number stuff, both for serial and parallel running
gaugefix.c              -- Fix to Coulomb gauge, requiring even number of sites in all directions
remap_stdio_from_args.c -- For reading input parameters
layout_hyper_prime.c    -- Handle the distribution of lattice sites across processors

# 2b) Additional files used only by pfaffian target (susy_phase)
io_phase.c -- Primitive (for now) dump and load routines for checkpointing pfaffian computations
# ------------------------------------------------------------------
